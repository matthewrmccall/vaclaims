{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["formReducer","state","event","reset","name","email","phone","type","value","App","useReducer","formData","setFormData","useState","submitting","setSubmitting","handleChange","isCheckbox","target","checked","className","Object","entries","map","toString","onSubmit","preventDefault","setTimeout","disabled","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAOMA,G,MAAc,SAACC,EAAOC,GAG1B,OAAGA,EAAMC,MACA,CACLC,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,KAAM,GACN,SAAW,GAGR,2BACFN,GADL,kBAGGC,EAAME,KAAOF,EAAMM,UAmGTC,MA9Ff,WAAe,MAKmBC,qBAAWV,EAAa,CACtDI,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,KAAM,GACN,SAAW,IAVA,mBAKNI,EALM,KAKIC,EALJ,OAcuBC,oBAAS,GAdhC,mBAcNC,EAdM,KAcMC,EAdN,KA+BPC,EAAe,SAAAd,GAEnB,IAAMe,EAAmC,aAAtBf,EAAMgB,OAAOX,KAGhCK,EAAY,CACVR,KAAMF,EAAMgB,OAAOd,KAGnBI,MAAOS,EAAaf,EAAMgB,OAAOC,QAAUjB,EAAMgB,OAAOV,SAK5D,OACE,sBAAKY,UAAU,UAAf,UACE,6DACA,+DACCN,GACD,oEAEE,6BACGO,OAAOC,QAAQX,GAAUY,KAAI,SAACnB,EAAMI,GAAP,OAC5B,+BAAe,iCAASJ,IAAxB,IAAwCI,EAAMgB,aAArCpB,WAMf,uBAAMqB,SA5CW,SAAAvB,GAEnBA,EAAMwB,iBAENX,GAAc,GAEdY,YAAW,WACTZ,GAAc,GACdH,EAAY,CACVT,OAAO,MAER,MAiCD,UACA,0BAAUyB,SAAUd,EAApB,SACE,kCACE,qCACA,uBAAOV,KAAK,OAAOyB,SAAUb,EAAcR,MAAOG,EAASP,OAC3D,sCACA,uBAAOA,KAAK,QAAQyB,SAAUb,EAAcR,MAAOG,EAASN,QAC5D,oDACA,uBAAOD,KAAK,QAAQyB,SAAUb,EAAcR,MAAOG,EAASL,aAIhE,2BAAUsB,SAAUd,EAApB,UACE,kCACE,yDACA,yBAAQV,KAAK,OAAOyB,SAAUb,EAAcR,MAAOG,EAASJ,KAA5D,UACE,wBAAQC,MAAM,WAAd,sBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,WAAd,gCAIJ,kCACE,qEACA,uBAAOD,KAAK,WAAWH,KAAK,UAAUyB,SAAUb,EAAcG,QAASR,EAAQ,gBAInF,wBAAQJ,KAAK,SAASqB,SAAUd,EAAhC,2BCvGSgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.54e2e3c1.chunk.js","sourcesContent":["// vaclaims is a signup form for veterans disability compensation help\n// import React and use hooks to create objects\n// hooks let you use state without writing a class\nimport React, { useReducer, useState } from 'react';\nimport './App.css';\n\n// reducer function that takes inputs state and event\nconst formReducer = (state, event) => {\n  // when the event.reset property is true\n  // reset the field values to empty strings\n  if(event.reset) {\n    return {\n      name: '',\n      email: '',\n      phone: '',\n      type: '',\n      'contact': false\n    }\n  }\n  return {\n    ...state,\n    // pass an event object with properties name and value\n    [event.name]: event.value\n  }\n}\n\n// MAIN BODY OF APPLICATION\nfunction App() {\n  // variables formData and setFormData are assigned to:\n  // the hook useReducer called with both the parameter formReducer\n  // and the second argument: an object containing the initial states of\n  // all the form fields as keys\n  const [formData, setFormData] = useReducer(formReducer, {\n    name: '',\n    email: '',\n    phone: '',\n    type: '',\n    'contact': false\n  });\n  // variables submitting and setSubmitting are assigned to the result of:\n  // calling the useState hook with a parameter of false\n  const [submitting, setSubmitting] = useState(false);\n  // function handleSubmit has parameter event\n  const handleSubmit = event => {\n  // run the event.preventDefault property in this function\n    event.preventDefault();\n  // set the setSubmitting variable to true\n    setSubmitting(true);\n  // show Submitting Form message for 3 sec on button click\n    setTimeout(() => {\n      setSubmitting(false);\n      setFormData({\n        reset: true\n      })\n    }, 3000)\n  }\n// function to pull the data from the event.target\n// and pass the object to setFormData\n  const handleChange = event => {\n    // check if event.target.type is checkbox\n    const isCheckbox = event.target.type === 'checkbox';\n    // setFormData is an object with keys: name and value\n    // and values of event.target.name and event.target.value\n    setFormData({\n      name: event.target.name,\n      // if type is checkbox, pass event.target.checked as the value\n      // otherwise, pass event.target.value as value\n      value: isCheckbox ? event.target.checked : event.target.value\n    });\n  }\n// the user-facing section\n// update the onChange event handler to use the handleChange function\n  return (\n    <div className=\"wrapper\">\n      <h1>Get help with your VA Claim</h1>\n      <h2>Let's increase your VA rating</h2>\n      {submitting &&\n      <div>\n        You are submitting the following:\n        <ul>\n          {Object.entries(formData).map((name, value) => (\n            <li key={name}><strong>{name}</strong>:{value.toString()}</li>\n          ))}\n          </ul>\n      </div>\n      }\n\n      <form onSubmit={handleSubmit}>\n      <fieldset disabled={submitting}>\n        <label>\n          <p>Name</p>\n          <input name=\"name\" onChange={handleChange} value={formData.name}/>\n          <p>Email</p>\n          <input name=\"email\" onChange={handleChange} value={formData.email}/>\n          <p>Phone (recommended)</p>\n          <input name=\"phone\" onChange={handleChange} value={formData.phone}/>\n        </label>\n      </fieldset>\n\n      <fieldset disabled={submitting}>\n        <label>\n          <p>Please choose an option:</p>\n          <select name=\"type\" onChange={handleChange} value={formData.type}>\n            <option value=\"VA Claim\">VA Claim</option>\n            <option value=\"VA Appeal\">VA Appeal</option>\n            <option value=\"Not sure\">I'm not sure</option>\n          </select>\n        </label>\n\n        <label>\n          <p>Contact me about my VA Claim/Appeal.</p>\n          <input type=\"checkbox\" name=\"contact\" onChange={handleChange} checked={formData['contact']} />\n        </label>\n      </fieldset>\n\n      <button type=\"submit\" disabled={submitting}>Submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}